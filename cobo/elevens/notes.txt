Maine Lobsters: Samantha Hua, Ruby Friedman, Nada Hameed
APCS
L07: But These Go Up To Eleven
2022-03-21
time spent: 6.7 hrs

DISCO:
 - java -ea fileName enables assertions when running the file
 - assert booleanExpression : StringExpression --> if the booleanExpression
   is false, the StringExpression is returned
 - saw a useful implementation of the super() constructor. it allowed us to initialize
 	 instance variables in another file and assign them values from our current file.

QCC:
 - Does the AP exam have this much reading ? :(

Activity 2:
- we struggled with the syntax of constructor Deck
- there was an issue with cards.add(temp) —> turns out we had to initialize cards
- there was an issue with returning null when size < 0 —> we used a tryCatch
- questions:
	1.  Relationship between a card and a deck: a deck is a collection of cards, each of which have their own rank, suit, and pointValue.
	2. The deck contains 2 cards.
	3.
		String[] ranks = {“2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “10”, “jack”, “queen”, “king”, “ace”,“2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “10”, “jack”, “queen”, “king”, “ace”},“2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “10”, “jack”, “queen”, “king”, “ace”},“2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “10”, “jack”, “queen”, “king”, “ace”};
		String[] suits = {“spades”,“spades”,“spades”,“spades”,“spades”,“spades”,“spades”,“spades”,“spades”,“spades”,“spades”,“spades”,“spades”,”hearts”,”hearts”,”hearts”,”hearts”,”hearts”,”hearts”,”hearts”,”hearts”,”hearts”,”hearts”,”hearts”,”hearts”,”hearts”,”clubs”,”clubs”,”clubs”,”clubs”,”clubs”,”clubs”,”clubs”,”clubs”,”clubs”,”clubs”,”clubs”,”clubs”,”clubs”,”diamonds”,”diamonds”,”diamonds”,”diamonds”,”diamonds”,”diamonds”,”diamonds”,”diamonds”,”diamonds”,”diamonds”,”diamonds”,”diamonds”,”diamonds”};
		int[] pointValues = {2,3,4,5,6,7,8,9,10,10,10,10,11,2,3,4,5,6,7,8,9,10,10,10,10,11,2,3,4,5,6,7,8,9,10,10,10,10,11,2,3,4,5,6,7,8,9,10,10,10,10,11};
	4. The order does matter, because a card has a value from all three arrays. However, if you moved one of the values, it would assign a different value. If you synchronize the changes and move one value of each array to the back, the cards would still stay the same and the order wouldn’t matter.

Activity 3:
- we wrote an inefficient selectionShuffle, with a high time complexity (while loop within a for loop)
	—> DISCO: it is SUPER IMPORTANT to read directions before actually completing the exercise and wasting precious minutes
- we had to generalize perfectShuffle and selectionShuffle
- questions:
	1.
		public static String flip() {
             	   double prob = Math.random();
             	   if (prob > 0.67) {
              	          return "tails";
             	   } else {
             	           return "heads";
             		   }
     		   }
	2.
		public static boolean arePermutations(int[] a, int[] b) {
             	   boolean ret = true;
             	   int counter = 0;
             	   for (int i =0; i < a.length; i++) {
                	        for(int j =0;j<b.length; j++) {
                      	          if (a[i] == b[j]) {
                                	        counter ++;
                              	  	}
                       	 }
            	    }
                return (counter == a.length);
        }
	3. 011

Activity 4:
- questions about why we have to reset size in shuffle() —> we have to reset the deck

Activity 5:
- Buggy 1:
	- the isEmpty method is not working correctly, and doesn’t return true for an empty deck.
- Buggy 2:
	- the size method is incorrect - it returns 0 when it should return 1 - it doesn’t properly update the size
- Buggy 3
	- it was supposed to shuffle the decks, but it did not.
- Buggy 4
	- it doesn’t know how to deal a deck of one card - the deal method can’t be properly executed.

Activity 6:
- questions:
	1. you can take the 5 of spades and the 6 of clubs (sum of 11), or you can take the 5 of clubs and the 6 of clubs (another sum of 11).
	2. Yes, because there are a total of 4 pairs of JQK (one per suit), and the rest of the cards sum to 40 cards. If there are three cards left, that means that all the pair-eligible cards (not JQK) have been removed, as well as three sets of JQK.
	3. The game doesn’t involve strategy. The cards that are added to the board are completely random, so there’s no real strategy involved.

Activity 7:
- questions:
	1. instance variables for ElevensBoard.java
		- private List<Card> deck;
		- private int[] card;
	2. Algorithm for Elevens:
		1. shuffle the cards
		2. deal out nine cards face up
		3. remove a pair of cards that sum to eleven if possible
			-> if not, remove a trio of cards of J, Q, and K if possible
				-> if not, you lost
		4. replace the cards you removed
		5. go back to step 3 and repeat until the deck is empty -> victory is yours!
	3.
		- it has the instance variables
		- the methods regarding which cards to remove have not been completed
	4.
		a. it’s called in the ElevensBoard() constructor, and in newGame()
		b. anotherPlayIsPossible, isLegal
		c. cardIndexes method returns: 0, 1, 3, 6, 7 -> these are the indexes at which there aren’t null values
		d.
			public static void printCards(ElevensBoard board) {
				List<Integer> cIndexes = board.cardIndexes();
				for (int i = 0; i < cIndexes.size; i++) {
					System.out.println(board.cardAt(i);
				}
			}
		e. anotherPlayIsPossible must call cardIndexes earlier in order to see what the available indexes are to run containsPairSum11 or containsJQK.


Activity 8:
 - questions:
 	 1. thirteens:
	 			- uses a 10 card board
				- jack, queen have values of 11, 12, respectively.
				- pairs that add up to 13 are removed
				- kings are removed
				- probability of winning is 1 out of 2

	 		tens:
				- uses a 13 card Board
				- pairs that add up to 10 are removed
				- quartets of face cards + tens are removed
				- probability of winning is 1 out of 8

			elevens:
				- uses a 9 card board
				- pairs that add up to 11 are removed
				- ace is worth 1
				- face cards are removed

 	 2. The ElevensBoard uses the super() constructor so that runs the constructor
	 		within Board.java and initializes those instance variables. The values in
			the ElevensBoard are passed into the constructor of Board so the instance
			variables have the values from ElevensBoard.

 	 3. While there is no code within those methods, the comments above them
	 		describe what they do. It seems like the purpose of those methods are the
			same for all three games but it is necessary to change the specific values
			that pairs add up to because that is the difference between the games.

Activity 9:
 	 1. size is not an abstract method because it is an instance variable not a method.
	 2. We do not want to remove cards from the array because it would not allow us
	 		to rerun the algorithm.
	 3. I think both would work because they are both abstract. They outline the
	 		methods that a class file can expect but in both cases, they must be
			overwritten in order to compile.

Activity 10:
- we used cardAt to see if there was a king
